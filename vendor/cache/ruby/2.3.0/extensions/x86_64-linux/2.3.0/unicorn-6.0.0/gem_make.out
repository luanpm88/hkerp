current directory: /home/hoangkhang/hkerp/vendor/cache/ruby/2.3.0/gems/unicorn-6.0.0/ext/unicorn_http
/home/hoangkhang/.rvm/rubies/ruby-2.3.3/bin/ruby -I /home/hoangkhang/.rvm/rubies/ruby-2.3.3/lib/ruby/site_ruby/2.3.0 -r ./siteconf20210629-62768-u2zhhu.rb extconf.rb
checking for SIZEOF_OFF_T in ruby.h... yes
checking for SIZEOF_SIZE_T in ruby.h... yes
checking for SIZEOF_LONG in ruby.h... yes
checking for rb_str_set_len() in ruby.h... yes
checking for rb_hash_clear() in ruby.h... yes
checking for gmtime_r() in time.h... yes
checking if String#-@ (str_uminus) dedupes... no, needs Ruby 2.5+
checking if Hash#[]= (rb_hash_aset) dedupes... no, needs Ruby 2.6+
creating Makefile

current directory: /home/hoangkhang/hkerp/vendor/cache/ruby/2.3.0/gems/unicorn-6.0.0/ext/unicorn_http
make "DESTDIR=" clean

current directory: /home/hoangkhang/hkerp/vendor/cache/ruby/2.3.0/gems/unicorn-6.0.0/ext/unicorn_http
make "DESTDIR="
compiling unicorn_http.c
unicorn_http.c: In function ‘http_parser_execute’:
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  330 |   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
      |     ^
unicorn_http.rl:332:1: note: here
  332 |   action write_field { hp->s.field_len = LEN(start.field, fpc); }
      | ^ ~~
unicorn_http.rl:339:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  339 |   }
      |     ^
unicorn_http.rl:341:1: note: here
  341 |   action request_uri {
      | ^ ~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  330 |   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
      |     ^
unicorn_http.rl:332:1: note: here
  332 |   action write_field { hp->s.field_len = LEN(start.field, fpc); }
      | ^ ~~
unicorn_http.rl:358:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  358 |     rb_hash_aset(hp->env, g_fragment, STR_NEW(mark, fpc));
      |     ^
unicorn_http.rl:360:1: note: here
  360 |   action start_query {MARK(start.query, fpc); }
      | ^ ~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  330 |   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
      |     ^
unicorn_http.rl:332:1: note: here
  332 |   action write_field { hp->s.field_len = LEN(start.field, fpc); }
      | ^ ~~
unicorn_http.c:618:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  618 |  if ( ++p == pe )
      |     ^
unicorn_http.c:620:1: note: here
  620 | case 7:
      | ^~~~
unicorn_http.c:625:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  625 |  if ( ++p == pe )
      |     ^
unicorn_http.c:627:1: note: here
  627 | case 8:
      | ^~~~
unicorn_http.c:632:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  632 |  if ( ++p == pe )
      |     ^
unicorn_http.c:634:1: note: here
  634 | case 9:
      | ^~~~
unicorn_http.c:639:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  639 |  if ( ++p == pe )
      |     ^
unicorn_http.c:641:1: note: here
  641 | case 10:
      | ^~~~
unicorn_http.c:646:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  646 |  if ( ++p == pe )
      |     ^
unicorn_http.c:648:1: note: here
  648 | case 11:
      | ^~~~
unicorn_http.c:655:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  655 |  if ( ++p == pe )
      |     ^
unicorn_http.c:657:1: note: here
  657 | case 12:
      | ^~~~
unicorn_http.c:662:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  662 |  if ( ++p == pe )
      |     ^
unicorn_http.c:664:1: note: here
  664 | case 13:
      | ^~~~
unicorn_http.rl:337:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  337 |   action scheme {
      |     ^
unicorn_http.rl:339:1: note: here
  339 |   }
      | ^ ~ 
unicorn_http.rl:336:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  336 |   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
      |     ^
unicorn_http.rl:338:1: note: here
  338 |     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
      | ^   
unicorn_http.rl:336:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  336 |   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
      |     ^
unicorn_http.rl:338:1: note: here
  338 |     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
      | ^   
unicorn_http.rl:337:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  337 |   action scheme {
      |     ^
unicorn_http.rl:339:1: note: here
  339 |   }
      | ^ ~ 
unicorn_http.rl:358:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  358 |     rb_hash_aset(hp->env, g_fragment, STR_NEW(mark, fpc));
      |     ^
unicorn_http.rl:360:1: note: here
  360 |   action start_query {MARK(start.query, fpc); }
      | ^ ~~
unicorn_http.rl:333:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  333 |   action start_value { MARK(mark, fpc); }
      |     ^
unicorn_http.rl:335:1: note: here
  335 |   action write_cont_value { write_cont_value(hp, buffer, fpc); }
      | ^ ~~
unicorn_http.rl:335:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  335 |   action write_cont_value { write_cont_value(hp, buffer, fpc); }
      |     ^
unicorn_http.rl:337:1: note: here
  337 |   action scheme {
      | ^ ~~
unicorn_http.rl:336:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  336 |   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
      |     ^
unicorn_http.rl:338:1: note: here
  338 |     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
      | ^   
unicorn_http.rl:358:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  358 |     rb_hash_aset(hp->env, g_fragment, STR_NEW(mark, fpc));
      |     ^
unicorn_http.rl:360:1: note: here
  360 |   action start_query {MARK(start.query, fpc); }
      | ^ ~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  330 |   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
      |     ^
unicorn_http.rl:332:1: note: here
  332 |   action write_field { hp->s.field_len = LEN(start.field, fpc); }
      | ^ ~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  330 |   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
      |     ^
unicorn_http.rl:332:1: note: here
  332 |   action write_field { hp->s.field_len = LEN(start.field, fpc); }
      | ^ ~~
unicorn_http.c:1398:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1398 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1400:1: note: here
 1400 | case 25:
      | ^~~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  330 |   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
      |     ^
unicorn_http.rl:332:1: note: here
  332 |   action write_field { hp->s.field_len = LEN(start.field, fpc); }
      | ^ ~~
unicorn_http.c:1436:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1436 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1438:1: note: here
 1438 | case 27:
      | ^~~~
unicorn_http.c:1449:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1449 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1451:1: note: here
 1451 | case 28:
      | ^~~~
unicorn_http.rl:378:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  378 |     if (hp->len.chunk < 0)
      |     ^
unicorn_http.rl:380:1: note: here
  380 |   }
      | ^ ~ 
unicorn_http.rl:363:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  363 |     rb_hash_aset(hp->env, g_query_string, STR_NEW(start.query, fpc));
      |     ^
unicorn_http.rl:365:1: note: here
  365 |   action http_version { http_version(hp, PTR_TO(mark), LEN(mark, fpc)); }
      | ^ ~~
unicorn_http.rl:363:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  363 |     rb_hash_aset(hp->env, g_query_string, STR_NEW(start.query, fpc));
      |     ^
unicorn_http.rl:365:1: note: here
  365 |   action http_version { http_version(hp, PTR_TO(mark), LEN(mark, fpc)); }
      | ^ ~~
unicorn_http.c:1525:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1525 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1527:1: note: here
 1527 | case 32:
      | ^~~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  334 |   action write_value { write_value(hp, buffer, fpc); }
      |     ^
unicorn_http.rl:336:1: note: here
  336 |   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
      | ^ ~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  334 |   action write_value { write_value(hp, buffer, fpc); }
      |     ^
unicorn_http.rl:336:1: note: here
  336 |   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
      | ^ ~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  334 |   action write_value { write_value(hp, buffer, fpc); }
      |     ^
unicorn_http.rl:336:1: note: here
  336 |   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
      | ^ ~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  334 |   action write_value { write_value(hp, buffer, fpc); }
      |     ^
unicorn_http.rl:336:1: note: here
  336 |   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
      | ^ ~~
unicorn_http.rl:342:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  342 |     VALUE str;
      |     ^
unicorn_http.rl:344:1: note: here
  344 |     VALIDATE_MAX_URI_LENGTH(LEN(mark, fpc), REQUEST_URI);
      | ^   
unicorn_http.c:1611:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1611 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1613:1: note: here
 1613 | case 38:
      | ^~~~
unicorn_http.c:1618:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1618 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1620:1: note: here
 1620 | case 39:
      | ^~~~
unicorn_http.c:1648:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1648 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1650:1: note: here
 1650 | case 40:
      | ^~~~
unicorn_http.c:1668:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1668 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1670:1: note: here
 1670 | case 41:
      | ^~~~
unicorn_http.c:1681:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1681 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1683:1: note: here
 1683 | case 42:
      | ^~~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  330 |   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
      |     ^
unicorn_http.rl:332:1: note: here
  332 |   action write_field { hp->s.field_len = LEN(start.field, fpc); }
      | ^ ~~
unicorn_http.c:1730:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1730 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1732:1: note: here
 1732 | case 44:
      | ^~~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  330 |   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
      |     ^
unicorn_http.rl:332:1: note: here
  332 |   action write_field { hp->s.field_len = LEN(start.field, fpc); }
      | ^ ~~
unicorn_http.c:1787:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1787 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1789:1: note: here
 1789 | case 46:
      | ^~~~
unicorn_http.c:1817:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1817 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1819:1: note: here
 1819 | case 47:
      | ^~~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  334 |   action write_value { write_value(hp, buffer, fpc); }
      |     ^
unicorn_http.rl:336:1: note: here
  336 |   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
      | ^ ~~
unicorn_http.c:1850:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1850 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1852:1: note: here
 1852 | case 49:
      | ^~~~
unicorn_http.c:1878:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1878 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1880:1: note: here
 1880 | case 50:
      | ^~~~
unicorn_http.c:1906:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1906 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1908:1: note: here
 1908 | case 51:
      | ^~~~
unicorn_http.c:1934:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1934 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1936:1: note: here
 1936 | case 52:
      | ^~~~
unicorn_http.c:1962:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1962 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1964:1: note: here
 1964 | case 53:
      | ^~~~
unicorn_http.c:1990:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 1990 |  if ( ++p == pe )
      |     ^
unicorn_http.c:1992:1: note: here
 1992 | case 54:
      | ^~~~
unicorn_http.c:2018:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2018 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2020:1: note: here
 2020 | case 55:
      | ^~~~
unicorn_http.c:2046:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2046 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2048:1: note: here
 2048 | case 56:
      | ^~~~
unicorn_http.c:2074:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2074 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2076:1: note: here
 2076 | case 57:
      | ^~~~
unicorn_http.c:2102:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2102 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2104:1: note: here
 2104 | case 58:
      | ^~~~
unicorn_http.c:2130:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2130 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2132:1: note: here
 2132 | case 59:
      | ^~~~
unicorn_http.c:2158:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2158 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2160:1: note: here
 2160 | case 60:
      | ^~~~
unicorn_http.c:2186:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2186 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2188:1: note: here
 2188 | case 61:
      | ^~~~
unicorn_http.c:2214:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2214 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2216:1: note: here
 2216 | case 62:
      | ^~~~
unicorn_http.c:2242:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2242 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2244:1: note: here
 2244 | case 63:
      | ^~~~
unicorn_http.c:2270:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2270 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2272:1: note: here
 2272 | case 64:
      | ^~~~
unicorn_http.c:2298:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2298 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2300:1: note: here
 2300 | case 65:
      | ^~~~
unicorn_http.c:2326:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2326 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2328:1: note: here
 2328 | case 66:
      | ^~~~
unicorn_http.c:2354:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2354 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2356:1: note: here
 2356 | case 67:
      | ^~~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  330 |   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
      |     ^
unicorn_http.rl:332:1: note: here
  332 |   action write_field { hp->s.field_len = LEN(start.field, fpc); }
      | ^ ~~
unicorn_http.c:2395:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2395 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2397:1: note: here
 2397 | case 69:
      | ^~~~
unicorn_http.c:2424:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2424 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2426:1: note: here
 2426 | case 70:
      | ^~~~
unicorn_http.rl:339:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  339 |   }
      |     ^
unicorn_http.rl:341:1: note: here
  341 |   action request_uri {
      | ^ ~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  330 |   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
      |     ^
unicorn_http.rl:332:1: note: here
  332 |   action write_field { hp->s.field_len = LEN(start.field, fpc); }
      | ^ ~~
unicorn_http.rl:358:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  358 |     rb_hash_aset(hp->env, g_fragment, STR_NEW(mark, fpc));
      |     ^
unicorn_http.rl:360:1: note: here
  360 |   action start_query {MARK(start.query, fpc); }
      | ^ ~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  330 |   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
      |     ^
unicorn_http.rl:332:1: note: here
  332 |   action write_field { hp->s.field_len = LEN(start.field, fpc); }
      | ^ ~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  330 |   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
      |     ^
unicorn_http.rl:332:1: note: here
  332 |   action write_field { hp->s.field_len = LEN(start.field, fpc); }
      | ^ ~~
unicorn_http.c:2633:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2633 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2635:1: note: here
 2635 | case 76:
      | ^~~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  330 |   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
      |     ^
unicorn_http.rl:332:1: note: here
  332 |   action write_field { hp->s.field_len = LEN(start.field, fpc); }
      | ^ ~~
unicorn_http.c:2673:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2673 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2675:1: note: here
 2675 | case 78:
      | ^~~~
unicorn_http.c:2686:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2686 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2688:1: note: here
 2688 | case 79:
      | ^~~~
unicorn_http.rl:378:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  378 |     if (hp->len.chunk < 0)
      |     ^
unicorn_http.rl:380:1: note: here
  380 |   }
      | ^ ~ 
unicorn_http.rl:363:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  363 |     rb_hash_aset(hp->env, g_query_string, STR_NEW(start.query, fpc));
      |     ^
unicorn_http.rl:365:1: note: here
  365 |   action http_version { http_version(hp, PTR_TO(mark), LEN(mark, fpc)); }
      | ^ ~~
unicorn_http.rl:363:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  363 |     rb_hash_aset(hp->env, g_query_string, STR_NEW(start.query, fpc));
      |     ^
unicorn_http.rl:365:1: note: here
  365 |   action http_version { http_version(hp, PTR_TO(mark), LEN(mark, fpc)); }
      | ^ ~~
unicorn_http.c:2766:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2766 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2768:1: note: here
 2768 | case 83:
      | ^~~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  334 |   action write_value { write_value(hp, buffer, fpc); }
      |     ^
unicorn_http.rl:336:1: note: here
  336 |   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
      | ^ ~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  334 |   action write_value { write_value(hp, buffer, fpc); }
      |     ^
unicorn_http.rl:336:1: note: here
  336 |   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
      | ^ ~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  334 |   action write_value { write_value(hp, buffer, fpc); }
      |     ^
unicorn_http.rl:336:1: note: here
  336 |   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
      | ^ ~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  334 |   action write_value { write_value(hp, buffer, fpc); }
      |     ^
unicorn_http.rl:336:1: note: here
  336 |   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
      | ^ ~~
unicorn_http.rl:342:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  342 |     VALUE str;
      |     ^
unicorn_http.rl:344:1: note: here
  344 |     VALIDATE_MAX_URI_LENGTH(LEN(mark, fpc), REQUEST_URI);
      | ^   
unicorn_http.c:2852:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2852 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2854:1: note: here
 2854 | case 89:
      | ^~~~
unicorn_http.c:2859:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2859 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2861:1: note: here
 2861 | case 90:
      | ^~~~
unicorn_http.c:2889:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2889 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2891:1: note: here
 2891 | case 91:
      | ^~~~
unicorn_http.c:2909:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2909 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2911:1: note: here
 2911 | case 92:
      | ^~~~
unicorn_http.c:2922:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2922 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2924:1: note: here
 2924 | case 93:
      | ^~~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  330 |   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
      |     ^
unicorn_http.rl:332:1: note: here
  332 |   action write_field { hp->s.field_len = LEN(start.field, fpc); }
      | ^ ~~
unicorn_http.c:2971:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 2971 |  if ( ++p == pe )
      |     ^
unicorn_http.c:2973:1: note: here
 2973 | case 95:
      | ^~~~
unicorn_http.rl:330:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  330 |   action snake_upcase_field { snake_upcase_char(deconst(fpc)); }
      |     ^
unicorn_http.rl:332:1: note: here
  332 |   action write_field { hp->s.field_len = LEN(start.field, fpc); }
      | ^ ~~
unicorn_http.c:3028:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 3028 |  if ( ++p == pe )
      |     ^
unicorn_http.c:3030:1: note: here
 3030 | case 97:
      | ^~~~
unicorn_http.c:3058:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 3058 |  if ( ++p == pe )
      |     ^
unicorn_http.c:3060:1: note: here
 3060 | case 98:
      | ^~~~
unicorn_http.rl:334:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  334 |   action write_value { write_value(hp, buffer, fpc); }
      |     ^
unicorn_http.rl:336:1: note: here
  336 |   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
      | ^ ~~
unicorn_http.c:3091:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 3091 |  if ( ++p == pe )
      |     ^
unicorn_http.c:3093:1: note: here
 3093 | case 100:
      | ^~~~
unicorn_http.rl:383:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  383 | 
      |     ^
unicorn_http.rl:385:1: note: here
  385 |     if (HP_FL_TEST(hp, HASBODY)) {
      | ^   
unicorn_http.c:3150:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 3150 |  if ( ++p == pe )
      |     ^
unicorn_http.c:3152:1: note: here
 3152 | case 102:
      | ^~~~
unicorn_http.rl:383:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  383 | 
      |     ^
unicorn_http.rl:385:1: note: here
  385 |     if (HP_FL_TEST(hp, HASBODY)) {
      | ^   
unicorn_http.rl:431:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  431 | }%%
      |     ^
unicorn_http.rl:433:1: note: here
  433 | /** Data **/
      | ^~~~
unicorn_http.c:3218:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 3218 |  if ( ++p == pe )
      |     ^
unicorn_http.c:3220:1: note: here
 3220 | case 106:
      | ^~~~
unicorn_http.c:3225:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 3225 |  if ( ++p == pe )
      |     ^
unicorn_http.c:3227:1: note: here
 3227 | case 107:
      | ^~~~
unicorn_http.c:3232:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 3232 |  if ( ++p == pe )
      |     ^
unicorn_http.c:3234:1: note: here
 3234 | case 108:
      | ^~~~
unicorn_http.c:3264:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 3264 |  if ( ++p == pe )
      |     ^
unicorn_http.c:3266:1: note: here
 3266 | case 109:
      | ^~~~
unicorn_http.c:3295:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 3295 |  if ( ++p == pe )
      |     ^
unicorn_http.c:3297:1: note: here
 3297 | case 110:
      | ^~~~
unicorn_http.c:3325:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 3325 |  if ( ++p == pe )
      |     ^
unicorn_http.c:3327:1: note: here
 3327 | case 111:
      | ^~~~
unicorn_http.c:3357:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 3357 |  if ( ++p == pe )
      |     ^
unicorn_http.c:3359:1: note: here
 3359 | case 112:
      | ^~~~
unicorn_http.c:3388:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 3388 |  if ( ++p == pe )
      |     ^
unicorn_http.c:3390:1: note: here
 3390 | case 113:
      | ^~~~
unicorn_http.rl:337:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  337 |   action scheme {
      |     ^
unicorn_http.rl:339:1: note: here
  339 |   }
      | ^ ~ 
unicorn_http.rl:336:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  336 |   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
      |     ^
unicorn_http.rl:338:1: note: here
  338 |     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
      | ^   
unicorn_http.rl:336:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  336 |   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
      |     ^
unicorn_http.rl:338:1: note: here
  338 |     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
      | ^   
unicorn_http.rl:337:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  337 |   action scheme {
      |     ^
unicorn_http.rl:339:1: note: here
  339 |   }
      | ^ ~ 
unicorn_http.c:3550:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
 3550 |  if ( ++p == pe )
      |     ^
unicorn_http.c:3552:1: note: here
 3552 | case 118:
      | ^~~~
unicorn_http.rl:333:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  333 |   action start_value { MARK(mark, fpc); }
      |     ^
unicorn_http.rl:335:1: note: here
  335 |   action write_cont_value { write_cont_value(hp, buffer, fpc); }
      | ^ ~~
unicorn_http.rl:335:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  335 |   action write_cont_value { write_cont_value(hp, buffer, fpc); }
      |     ^
unicorn_http.rl:337:1: note: here
  337 |   action scheme {
      | ^ ~~
unicorn_http.rl:336:5: warning: this statement may fall through [-Wimplicit-fallthrough=]
  336 |   action request_method { request_method(hp, PTR_TO(mark), LEN(mark, fpc)); }
      |     ^
unicorn_http.rl:338:1: note: here
  338 |     rb_hash_aset(hp->env, g_rack_url_scheme, STR_NEW(mark, fpc));
      | ^   
At top level:
unicorn_http.c:340:18: warning: ‘http_parser_en_main’ defined but not used [-Wunused-const-variable=]
  340 | static const int http_parser_en_main = 1;
      |                  ^~~~~~~~~~~~~~~~~~~
unicorn_http.c:338:18: warning: ‘http_parser_en_ChunkedBody_chunk_chunk_end’ defined but not used [-Wunused-const-variable=]
  338 | static const int http_parser_en_ChunkedBody_chunk_chunk_end = 105;
      |                  ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
compiling httpdate.c
linking shared-object unicorn_http.so

current directory: /home/hoangkhang/hkerp/vendor/cache/ruby/2.3.0/gems/unicorn-6.0.0/ext/unicorn_http
make "DESTDIR=" install
/usr/bin/install -m 0755 unicorn_http.so ./.gem.20210629-62768-1ik9jwy
